// Code generated by protoc-gen-go.
// source: raft.proto
// DO NOT EDIT!

/*
Package raft is a generated protocol buffer package.

It is generated from these files:
	raft.proto

It has these top-level messages:
	NodeAddr
	Command
	Operation
	LogEntry
	JoinRequest
	JoinReply
	StartRequest
	StartReply
	RequestVoteArgs
	RequestVoteReply
	AppendEntriesArgs
	AppendEntriesReply
	GetTermRequest
	GetTermReply
	GetStateRequest
	GetStateReply
	EnableNodeRequest
	EnableNodeReply
	DisableNodeRequest
	DisableNodeReply
	SetNodetoNodeRequest
	SetNodetoNodeReply
	ClientRequest
	ClientReply
*/
package raft

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Raft State
type RaftState int32

const (
	RaftState_FOLLOWER  RaftState = 0
	RaftState_CANDIDATE RaftState = 1
	RaftState_LEADER    RaftState = 2
)

var RaftState_name = map[int32]string{
	0: "FOLLOWER",
	1: "CANDIDATE",
	2: "LEADER",
}
var RaftState_value = map[string]int32{
	"FOLLOWER":  0,
	"CANDIDATE": 1,
	"LEADER":    2,
}

func (x RaftState) String() string {
	return proto.EnumName(RaftState_name, int32(x))
}
func (RaftState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Node Addr
type NodeAddr struct {
	Addr string `protobuf:"bytes,1,opt,name=Addr" json:"Addr,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=Id" json:"Id,omitempty"`
}

func (m *NodeAddr) Reset()                    { *m = NodeAddr{} }
func (m *NodeAddr) String() string            { return proto.CompactTextString(m) }
func (*NodeAddr) ProtoMessage()               {}
func (*NodeAddr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NodeAddr) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *NodeAddr) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Command struct {
	ClientNodeAddr *NodeAddr  `protobuf:"bytes,1,opt,name=ClientNodeAddr" json:"ClientNodeAddr,omitempty"`
	Cid            int32      `protobuf:"varint,2,opt,name=Cid" json:"Cid,omitempty"`
	SeqNum         int32      `protobuf:"varint,3,opt,name=SeqNum" json:"SeqNum,omitempty"`
	Op             *Operation `protobuf:"bytes,4,opt,name=Op" json:"Op,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Command) GetClientNodeAddr() *NodeAddr {
	if m != nil {
		return m.ClientNodeAddr
	}
	return nil
}

func (m *Command) GetCid() int32 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *Command) GetSeqNum() int32 {
	if m != nil {
		return m.SeqNum
	}
	return 0
}

func (m *Command) GetOp() *Operation {
	if m != nil {
		return m.Op
	}
	return nil
}

type Operation struct {
	OpType string `protobuf:"bytes,1,opt,name=OpType" json:"OpType,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
	Data   string `protobuf:"bytes,3,opt,name=Data" json:"Data,omitempty"`
}

func (m *Operation) Reset()                    { *m = Operation{} }
func (m *Operation) String() string            { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()               {}
func (*Operation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Operation) GetOpType() string {
	if m != nil {
		return m.OpType
	}
	return ""
}

func (m *Operation) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Operation) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type LogEntry struct {
	Term         int32    `protobuf:"varint,1,opt,name=Term" json:"Term,omitempty"`
	Cmd          *Command `protobuf:"bytes,2,opt,name=Cmd" json:"Cmd,omitempty"`
	ClientId     int32    `protobuf:"varint,3,opt,name=ClientId" json:"ClientId,omitempty"`
	ClientSeqNum int32    `protobuf:"varint,4,opt,name=ClientSeqNum" json:"ClientSeqNum,omitempty"`
}

func (m *LogEntry) Reset()                    { *m = LogEntry{} }
func (m *LogEntry) String() string            { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()               {}
func (*LogEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LogEntry) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *LogEntry) GetCmd() *Command {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (m *LogEntry) GetClientId() int32 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *LogEntry) GetClientSeqNum() int32 {
	if m != nil {
		return m.ClientSeqNum
	}
	return 0
}

// Join Request
type JoinRequest struct {
	RemoteNode *NodeAddr `protobuf:"bytes,1,opt,name=RemoteNode" json:"RemoteNode,omitempty"`
	FromNode   *NodeAddr `protobuf:"bytes,2,opt,name=FromNode" json:"FromNode,omitempty"`
}

func (m *JoinRequest) Reset()                    { *m = JoinRequest{} }
func (m *JoinRequest) String() string            { return proto.CompactTextString(m) }
func (*JoinRequest) ProtoMessage()               {}
func (*JoinRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *JoinRequest) GetRemoteNode() *NodeAddr {
	if m != nil {
		return m.RemoteNode
	}
	return nil
}

func (m *JoinRequest) GetFromNode() *NodeAddr {
	if m != nil {
		return m.FromNode
	}
	return nil
}

type JoinReply struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *JoinReply) Reset()                    { *m = JoinReply{} }
func (m *JoinReply) String() string            { return proto.CompactTextString(m) }
func (*JoinReply) ProtoMessage()               {}
func (*JoinReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *JoinReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// Start Request
type StartRequest struct {
	RemoteNode *NodeAddr   `protobuf:"bytes,1,opt,name=RemoteNode" json:"RemoteNode,omitempty"`
	OtherNodes []*NodeAddr `protobuf:"bytes,2,rep,name=OtherNodes" json:"OtherNodes,omitempty"`
}

func (m *StartRequest) Reset()                    { *m = StartRequest{} }
func (m *StartRequest) String() string            { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()               {}
func (*StartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *StartRequest) GetRemoteNode() *NodeAddr {
	if m != nil {
		return m.RemoteNode
	}
	return nil
}

func (m *StartRequest) GetOtherNodes() []*NodeAddr {
	if m != nil {
		return m.OtherNodes
	}
	return nil
}

type StartReply struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *StartReply) Reset()                    { *m = StartReply{} }
func (m *StartReply) String() string            { return proto.CompactTextString(m) }
func (*StartReply) ProtoMessage()               {}
func (*StartReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *StartReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// RequestVoteRPC
type RequestVoteArgs struct {
	FromNode    *NodeAddr `protobuf:"bytes,1,opt,name=FromNode" json:"FromNode,omitempty"`
	Term        int32     `protobuf:"varint,2,opt,name=Term" json:"Term,omitempty"`
	CandidateId string    `protobuf:"bytes,3,opt,name=CandidateId" json:"CandidateId,omitempty"`
	LastLogIdx  int32     `protobuf:"varint,4,opt,name=LastLogIdx" json:"LastLogIdx,omitempty"`
	LastLogTerm int32     `protobuf:"varint,5,opt,name=LastLogTerm" json:"LastLogTerm,omitempty"`
}

func (m *RequestVoteArgs) Reset()                    { *m = RequestVoteArgs{} }
func (m *RequestVoteArgs) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteArgs) ProtoMessage()               {}
func (*RequestVoteArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RequestVoteArgs) GetFromNode() *NodeAddr {
	if m != nil {
		return m.FromNode
	}
	return nil
}

func (m *RequestVoteArgs) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteArgs) GetCandidateId() string {
	if m != nil {
		return m.CandidateId
	}
	return ""
}

func (m *RequestVoteArgs) GetLastLogIdx() int32 {
	if m != nil {
		return m.LastLogIdx
	}
	return 0
}

func (m *RequestVoteArgs) GetLastLogTerm() int32 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

type RequestVoteReply struct {
	Term        int32 `protobuf:"varint,1,opt,name=Term" json:"Term,omitempty"`
	VoteGranted bool  `protobuf:"varint,2,opt,name=VoteGranted" json:"VoteGranted,omitempty"`
}

func (m *RequestVoteReply) Reset()                    { *m = RequestVoteReply{} }
func (m *RequestVoteReply) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteReply) ProtoMessage()               {}
func (*RequestVoteReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RequestVoteReply) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteReply) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

// AppendEntriesRPC
type AppendEntriesArgs struct {
	FromNode     *NodeAddr   `protobuf:"bytes,1,opt,name=FromNode" json:"FromNode,omitempty"`
	Term         int32       `protobuf:"varint,2,opt,name=Term" json:"Term,omitempty"`
	LeaderId     string      `protobuf:"bytes,3,opt,name=LeaderId" json:"LeaderId,omitempty"`
	PrevLogIdx   int32       `protobuf:"varint,4,opt,name=PrevLogIdx" json:"PrevLogIdx,omitempty"`
	PrevLogTerm  int32       `protobuf:"varint,5,opt,name=PrevLogTerm" json:"PrevLogTerm,omitempty"`
	Entries      []*LogEntry `protobuf:"bytes,6,rep,name=Entries" json:"Entries,omitempty"`
	LeaderCommit int32       `protobuf:"varint,7,opt,name=LeaderCommit" json:"LeaderCommit,omitempty"`
}

func (m *AppendEntriesArgs) Reset()                    { *m = AppendEntriesArgs{} }
func (m *AppendEntriesArgs) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesArgs) ProtoMessage()               {}
func (*AppendEntriesArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *AppendEntriesArgs) GetFromNode() *NodeAddr {
	if m != nil {
		return m.FromNode
	}
	return nil
}

func (m *AppendEntriesArgs) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesArgs) GetLeaderId() string {
	if m != nil {
		return m.LeaderId
	}
	return ""
}

func (m *AppendEntriesArgs) GetPrevLogIdx() int32 {
	if m != nil {
		return m.PrevLogIdx
	}
	return 0
}

func (m *AppendEntriesArgs) GetPrevLogTerm() int32 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendEntriesArgs) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *AppendEntriesArgs) GetLeaderCommit() int32 {
	if m != nil {
		return m.LeaderCommit
	}
	return 0
}

type AppendEntriesReply struct {
	Term    int32 `protobuf:"varint,1,opt,name=Term" json:"Term,omitempty"`
	Success bool  `protobuf:"varint,2,opt,name=Success" json:"Success,omitempty"`
}

func (m *AppendEntriesReply) Reset()                    { *m = AppendEntriesReply{} }
func (m *AppendEntriesReply) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesReply) ProtoMessage()               {}
func (*AppendEntriesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AppendEntriesReply) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// GetTerm
type GetTermRequest struct {
	RemoteNode *NodeAddr `protobuf:"bytes,1,opt,name=RemoteNode" json:"RemoteNode,omitempty"`
}

func (m *GetTermRequest) Reset()                    { *m = GetTermRequest{} }
func (m *GetTermRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTermRequest) ProtoMessage()               {}
func (*GetTermRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetTermRequest) GetRemoteNode() *NodeAddr {
	if m != nil {
		return m.RemoteNode
	}
	return nil
}

type GetTermReply struct {
	Term    int32 `protobuf:"varint,1,opt,name=Term" json:"Term,omitempty"`
	Success bool  `protobuf:"varint,2,opt,name=Success" json:"Success,omitempty"`
}

func (m *GetTermReply) Reset()                    { *m = GetTermReply{} }
func (m *GetTermReply) String() string            { return proto.CompactTextString(m) }
func (*GetTermReply) ProtoMessage()               {}
func (*GetTermReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetTermReply) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *GetTermReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// GetState
type GetStateRequest struct {
	RemoteNode *NodeAddr `protobuf:"bytes,1,opt,name=RemoteNode" json:"RemoteNode,omitempty"`
}

func (m *GetStateRequest) Reset()                    { *m = GetStateRequest{} }
func (m *GetStateRequest) String() string            { return proto.CompactTextString(m) }
func (*GetStateRequest) ProtoMessage()               {}
func (*GetStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetStateRequest) GetRemoteNode() *NodeAddr {
	if m != nil {
		return m.RemoteNode
	}
	return nil
}

type GetStateReply struct {
	State   RaftState `protobuf:"varint,1,opt,name=State,enum=raft.RaftState" json:"State,omitempty"`
	Success bool      `protobuf:"varint,2,opt,name=Success" json:"Success,omitempty"`
}

func (m *GetStateReply) Reset()                    { *m = GetStateReply{} }
func (m *GetStateReply) String() string            { return proto.CompactTextString(m) }
func (*GetStateReply) ProtoMessage()               {}
func (*GetStateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetStateReply) GetState() RaftState {
	if m != nil {
		return m.State
	}
	return RaftState_FOLLOWER
}

func (m *GetStateReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// Enable Node
type EnableNodeRequest struct {
}

func (m *EnableNodeRequest) Reset()                    { *m = EnableNodeRequest{} }
func (m *EnableNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*EnableNodeRequest) ProtoMessage()               {}
func (*EnableNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type EnableNodeReply struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *EnableNodeReply) Reset()                    { *m = EnableNodeReply{} }
func (m *EnableNodeReply) String() string            { return proto.CompactTextString(m) }
func (*EnableNodeReply) ProtoMessage()               {}
func (*EnableNodeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *EnableNodeReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// Disable Node
type DisableNodeRequest struct {
}

func (m *DisableNodeRequest) Reset()                    { *m = DisableNodeRequest{} }
func (m *DisableNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*DisableNodeRequest) ProtoMessage()               {}
func (*DisableNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type DisableNodeReply struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *DisableNodeReply) Reset()                    { *m = DisableNodeReply{} }
func (m *DisableNodeReply) String() string            { return proto.CompactTextString(m) }
func (*DisableNodeReply) ProtoMessage()               {}
func (*DisableNodeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *DisableNodeReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// SetNodetoNode
type SetNodetoNodeRequest struct {
	ToNode *NodeAddr `protobuf:"bytes,1,opt,name=ToNode" json:"ToNode,omitempty"`
	Enable bool      `protobuf:"varint,2,opt,name=Enable" json:"Enable,omitempty"`
}

func (m *SetNodetoNodeRequest) Reset()                    { *m = SetNodetoNodeRequest{} }
func (m *SetNodetoNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*SetNodetoNodeRequest) ProtoMessage()               {}
func (*SetNodetoNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *SetNodetoNodeRequest) GetToNode() *NodeAddr {
	if m != nil {
		return m.ToNode
	}
	return nil
}

func (m *SetNodetoNodeRequest) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

type SetNodetoNodeReply struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *SetNodetoNodeReply) Reset()                    { *m = SetNodetoNodeReply{} }
func (m *SetNodetoNodeReply) String() string            { return proto.CompactTextString(m) }
func (*SetNodetoNodeReply) ProtoMessage()               {}
func (*SetNodetoNodeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *SetNodetoNodeReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// Request
type ClientRequest struct {
	Cmd *Command `protobuf:"bytes,1,opt,name=Cmd" json:"Cmd,omitempty"`
}

func (m *ClientRequest) Reset()                    { *m = ClientRequest{} }
func (m *ClientRequest) String() string            { return proto.CompactTextString(m) }
func (*ClientRequest) ProtoMessage()               {}
func (*ClientRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ClientRequest) GetCmd() *Command {
	if m != nil {
		return m.Cmd
	}
	return nil
}

type ClientReply struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *ClientReply) Reset()                    { *m = ClientReply{} }
func (m *ClientReply) String() string            { return proto.CompactTextString(m) }
func (*ClientReply) ProtoMessage()               {}
func (*ClientReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ClientReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*NodeAddr)(nil), "raft.NodeAddr")
	proto.RegisterType((*Command)(nil), "raft.Command")
	proto.RegisterType((*Operation)(nil), "raft.Operation")
	proto.RegisterType((*LogEntry)(nil), "raft.LogEntry")
	proto.RegisterType((*JoinRequest)(nil), "raft.JoinRequest")
	proto.RegisterType((*JoinReply)(nil), "raft.JoinReply")
	proto.RegisterType((*StartRequest)(nil), "raft.StartRequest")
	proto.RegisterType((*StartReply)(nil), "raft.StartReply")
	proto.RegisterType((*RequestVoteArgs)(nil), "raft.RequestVoteArgs")
	proto.RegisterType((*RequestVoteReply)(nil), "raft.RequestVoteReply")
	proto.RegisterType((*AppendEntriesArgs)(nil), "raft.AppendEntriesArgs")
	proto.RegisterType((*AppendEntriesReply)(nil), "raft.AppendEntriesReply")
	proto.RegisterType((*GetTermRequest)(nil), "raft.GetTermRequest")
	proto.RegisterType((*GetTermReply)(nil), "raft.GetTermReply")
	proto.RegisterType((*GetStateRequest)(nil), "raft.GetStateRequest")
	proto.RegisterType((*GetStateReply)(nil), "raft.GetStateReply")
	proto.RegisterType((*EnableNodeRequest)(nil), "raft.EnableNodeRequest")
	proto.RegisterType((*EnableNodeReply)(nil), "raft.EnableNodeReply")
	proto.RegisterType((*DisableNodeRequest)(nil), "raft.DisableNodeRequest")
	proto.RegisterType((*DisableNodeReply)(nil), "raft.DisableNodeReply")
	proto.RegisterType((*SetNodetoNodeRequest)(nil), "raft.SetNodetoNodeRequest")
	proto.RegisterType((*SetNodetoNodeReply)(nil), "raft.SetNodetoNodeReply")
	proto.RegisterType((*ClientRequest)(nil), "raft.ClientRequest")
	proto.RegisterType((*ClientReply)(nil), "raft.ClientReply")
	proto.RegisterEnum("raft.RaftState", RaftState_name, RaftState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RaftRPC service

type RaftRPCClient interface {
	JoinRPC(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinReply, error)
	StartRPC(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartReply, error)
	RequestVoteRPC(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error)
	AppendEntriesRPC(ctx context.Context, in *AppendEntriesArgs, opts ...grpc.CallOption) (*AppendEntriesReply, error)
	ClientRequestRPC(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ClientReply, error)
	GetTermRPC(ctx context.Context, in *GetTermRequest, opts ...grpc.CallOption) (*GetTermReply, error)
	GetStateRPC(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateReply, error)
	EnableNodeRPC(ctx context.Context, in *EnableNodeRequest, opts ...grpc.CallOption) (*EnableNodeReply, error)
	DisableNodeRPC(ctx context.Context, in *DisableNodeRequest, opts ...grpc.CallOption) (*DisableNodeReply, error)
	SetNodetoNodeRPC(ctx context.Context, in *SetNodetoNodeRequest, opts ...grpc.CallOption) (*SetNodetoNodeReply, error)
}

type raftRPCClient struct {
	cc *grpc.ClientConn
}

func NewRaftRPCClient(cc *grpc.ClientConn) RaftRPCClient {
	return &raftRPCClient{cc}
}

func (c *raftRPCClient) JoinRPC(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinReply, error) {
	out := new(JoinReply)
	err := grpc.Invoke(ctx, "/raft.RaftRPC/JoinRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftRPCClient) StartRPC(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartReply, error) {
	out := new(StartReply)
	err := grpc.Invoke(ctx, "/raft.RaftRPC/StartRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftRPCClient) RequestVoteRPC(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error) {
	out := new(RequestVoteReply)
	err := grpc.Invoke(ctx, "/raft.RaftRPC/RequestVoteRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftRPCClient) AppendEntriesRPC(ctx context.Context, in *AppendEntriesArgs, opts ...grpc.CallOption) (*AppendEntriesReply, error) {
	out := new(AppendEntriesReply)
	err := grpc.Invoke(ctx, "/raft.RaftRPC/AppendEntriesRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftRPCClient) ClientRequestRPC(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ClientReply, error) {
	out := new(ClientReply)
	err := grpc.Invoke(ctx, "/raft.RaftRPC/ClientRequestRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftRPCClient) GetTermRPC(ctx context.Context, in *GetTermRequest, opts ...grpc.CallOption) (*GetTermReply, error) {
	out := new(GetTermReply)
	err := grpc.Invoke(ctx, "/raft.RaftRPC/GetTermRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftRPCClient) GetStateRPC(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateReply, error) {
	out := new(GetStateReply)
	err := grpc.Invoke(ctx, "/raft.RaftRPC/GetStateRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftRPCClient) EnableNodeRPC(ctx context.Context, in *EnableNodeRequest, opts ...grpc.CallOption) (*EnableNodeReply, error) {
	out := new(EnableNodeReply)
	err := grpc.Invoke(ctx, "/raft.RaftRPC/EnableNodeRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftRPCClient) DisableNodeRPC(ctx context.Context, in *DisableNodeRequest, opts ...grpc.CallOption) (*DisableNodeReply, error) {
	out := new(DisableNodeReply)
	err := grpc.Invoke(ctx, "/raft.RaftRPC/DisableNodeRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftRPCClient) SetNodetoNodeRPC(ctx context.Context, in *SetNodetoNodeRequest, opts ...grpc.CallOption) (*SetNodetoNodeReply, error) {
	out := new(SetNodetoNodeReply)
	err := grpc.Invoke(ctx, "/raft.RaftRPC/SetNodetoNodeRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RaftRPC service

type RaftRPCServer interface {
	JoinRPC(context.Context, *JoinRequest) (*JoinReply, error)
	StartRPC(context.Context, *StartRequest) (*StartReply, error)
	RequestVoteRPC(context.Context, *RequestVoteArgs) (*RequestVoteReply, error)
	AppendEntriesRPC(context.Context, *AppendEntriesArgs) (*AppendEntriesReply, error)
	ClientRequestRPC(context.Context, *ClientRequest) (*ClientReply, error)
	GetTermRPC(context.Context, *GetTermRequest) (*GetTermReply, error)
	GetStateRPC(context.Context, *GetStateRequest) (*GetStateReply, error)
	EnableNodeRPC(context.Context, *EnableNodeRequest) (*EnableNodeReply, error)
	DisableNodeRPC(context.Context, *DisableNodeRequest) (*DisableNodeReply, error)
	SetNodetoNodeRPC(context.Context, *SetNodetoNodeRequest) (*SetNodetoNodeReply, error)
}

func RegisterRaftRPCServer(s *grpc.Server, srv RaftRPCServer) {
	s.RegisterService(&_RaftRPC_serviceDesc, srv)
}

func _RaftRPC_JoinRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftRPCServer).JoinRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftRPC/JoinRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftRPCServer).JoinRPC(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftRPC_StartRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftRPCServer).StartRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftRPC/StartRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftRPCServer).StartRPC(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftRPC_RequestVoteRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftRPCServer).RequestVoteRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftRPC/RequestVoteRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftRPCServer).RequestVoteRPC(ctx, req.(*RequestVoteArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftRPC_AppendEntriesRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftRPCServer).AppendEntriesRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftRPC/AppendEntriesRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftRPCServer).AppendEntriesRPC(ctx, req.(*AppendEntriesArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftRPC_ClientRequestRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftRPCServer).ClientRequestRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftRPC/ClientRequestRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftRPCServer).ClientRequestRPC(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftRPC_GetTermRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftRPCServer).GetTermRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftRPC/GetTermRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftRPCServer).GetTermRPC(ctx, req.(*GetTermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftRPC_GetStateRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftRPCServer).GetStateRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftRPC/GetStateRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftRPCServer).GetStateRPC(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftRPC_EnableNodeRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftRPCServer).EnableNodeRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftRPC/EnableNodeRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftRPCServer).EnableNodeRPC(ctx, req.(*EnableNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftRPC_DisableNodeRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftRPCServer).DisableNodeRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftRPC/DisableNodeRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftRPCServer).DisableNodeRPC(ctx, req.(*DisableNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftRPC_SetNodetoNodeRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNodetoNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftRPCServer).SetNodetoNodeRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftRPC/SetNodetoNodeRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftRPCServer).SetNodetoNodeRPC(ctx, req.(*SetNodetoNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RaftRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raft.RaftRPC",
	HandlerType: (*RaftRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinRPC",
			Handler:    _RaftRPC_JoinRPC_Handler,
		},
		{
			MethodName: "StartRPC",
			Handler:    _RaftRPC_StartRPC_Handler,
		},
		{
			MethodName: "RequestVoteRPC",
			Handler:    _RaftRPC_RequestVoteRPC_Handler,
		},
		{
			MethodName: "AppendEntriesRPC",
			Handler:    _RaftRPC_AppendEntriesRPC_Handler,
		},
		{
			MethodName: "ClientRequestRPC",
			Handler:    _RaftRPC_ClientRequestRPC_Handler,
		},
		{
			MethodName: "GetTermRPC",
			Handler:    _RaftRPC_GetTermRPC_Handler,
		},
		{
			MethodName: "GetStateRPC",
			Handler:    _RaftRPC_GetStateRPC_Handler,
		},
		{
			MethodName: "EnableNodeRPC",
			Handler:    _RaftRPC_EnableNodeRPC_Handler,
		},
		{
			MethodName: "DisableNodeRPC",
			Handler:    _RaftRPC_DisableNodeRPC_Handler,
		},
		{
			MethodName: "SetNodetoNodeRPC",
			Handler:    _RaftRPC_SetNodetoNodeRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 914 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x56, 0x5b, 0x6f, 0xe3, 0x44,
	0x14, 0xae, 0x73, 0xcf, 0xc9, 0xcd, 0x99, 0x74, 0x17, 0xcb, 0x0f, 0xb0, 0x1a, 0x69, 0x97, 0xd5,
	0x82, 0x02, 0x0a, 0x08, 0x21, 0xb1, 0x0f, 0xb8, 0x49, 0x28, 0x59, 0xa2, 0x26, 0x72, 0xa2, 0xe5,
	0xd9, 0x5b, 0x0f, 0xc5, 0x52, 0x63, 0xbb, 0xf6, 0x14, 0xd1, 0x27, 0x5e, 0x78, 0xe4, 0xef, 0xf0,
	0xfb, 0x60, 0x6e, 0x76, 0xc6, 0x49, 0x6a, 0x89, 0x8a, 0x97, 0x64, 0xe6, 0x3b, 0xe7, 0x7c, 0x73,
	0xae, 0x33, 0x06, 0x48, 0xbc, 0x5f, 0xe8, 0x38, 0x4e, 0x22, 0x1a, 0xa1, 0x1a, 0x5f, 0xe3, 0x31,
	0xb4, 0xae, 0x22, 0x9f, 0x38, 0xbe, 0x9f, 0x20, 0x04, 0x35, 0xfe, 0x6f, 0x19, 0x2f, 0x8c, 0xd7,
	0x6d, 0x57, 0xac, 0x51, 0x1f, 0x2a, 0x0b, 0xdf, 0xaa, 0x08, 0x84, 0xad, 0xf0, 0x5f, 0x06, 0x34,
	0xa7, 0xd1, 0x6e, 0xe7, 0x85, 0x3e, 0xfa, 0x06, 0xfa, 0xd3, 0xdb, 0x80, 0x84, 0x34, 0x63, 0x10,
	0x96, 0x9d, 0x49, 0x7f, 0x2c, 0x8e, 0xc9, 0x50, 0xf7, 0x40, 0x0b, 0x99, 0x50, 0x9d, 0x06, 0x92,
	0xb4, 0xee, 0xf2, 0x25, 0x7a, 0x0e, 0x8d, 0x0d, 0xb9, 0xbb, 0xba, 0xdf, 0x59, 0x55, 0x01, 0xaa,
	0x1d, 0xfa, 0x04, 0x2a, 0xab, 0xd8, 0xaa, 0x09, 0xd6, 0x81, 0x64, 0x5d, 0xc5, 0x24, 0xf1, 0x68,
	0x10, 0x85, 0x2e, 0x13, 0xe1, 0x05, 0xb4, 0x73, 0x80, 0xb3, 0xac, 0xe2, 0xed, 0x43, 0x4c, 0x54,
	0x04, 0x6a, 0xc7, 0xcf, 0xfb, 0x89, 0x3c, 0xa8, 0x20, 0xf8, 0x92, 0x47, 0x3a, 0xf3, 0xa8, 0x27,
	0x4e, 0x63, 0x91, 0xf2, 0x35, 0xfe, 0x03, 0x5a, 0xcb, 0xe8, 0x66, 0x1e, 0xd2, 0x44, 0xc8, 0xb7,
	0x24, 0xd9, 0x09, 0x9e, 0xba, 0x2b, 0xd6, 0xcc, 0x97, 0xea, 0x74, 0x27, 0xbd, 0xee, 0x4c, 0x7a,
	0xd2, 0x19, 0x95, 0x09, 0x97, 0x4b, 0x90, 0x0d, 0x2d, 0x19, 0x28, 0x4b, 0x98, 0x0c, 0x23, 0xdf,
	0x23, 0x0c, 0x5d, 0xb9, 0x56, 0x61, 0xd6, 0x84, 0xbc, 0x80, 0xe1, 0x00, 0x3a, 0xef, 0xa2, 0x20,
	0x74, 0xc9, 0xdd, 0x3d, 0x49, 0x29, 0x1a, 0x03, 0xb8, 0x64, 0x17, 0x51, 0xc2, 0xf3, 0xf6, 0x48,
	0x66, 0x35, 0x0d, 0xf4, 0x06, 0x5a, 0x3f, 0x24, 0xd1, 0x4e, 0x68, 0x57, 0x4e, 0x6a, 0xe7, 0x72,
	0xfc, 0x12, 0xda, 0xf2, 0xa8, 0xf8, 0xf6, 0x01, 0x59, 0xd0, 0xdc, 0xdc, 0x5f, 0x5f, 0x93, 0x34,
	0x15, 0xa7, 0xb4, 0xdc, 0x6c, 0x8b, 0x43, 0xe8, 0x6e, 0xa8, 0x97, 0xd0, 0xa7, 0xba, 0xc4, 0xf4,
	0x57, 0xf4, 0x57, 0x92, 0xf0, 0x4d, 0xca, 0x9c, 0xaa, 0x9e, 0xd2, 0xdf, 0x6b, 0xe0, 0x57, 0x00,
	0xea, 0xbc, 0x72, 0xbf, 0xfe, 0x36, 0x60, 0xa0, 0x7c, 0x7a, 0xcf, 0xce, 0x72, 0x92, 0x9b, 0xb4,
	0x10, 0xbe, 0x51, 0x1e, 0x7e, 0x5e, 0xde, 0x8a, 0x56, 0xde, 0x17, 0xd0, 0x99, 0xb2, 0x52, 0x06,
	0xbe, 0x47, 0x89, 0x2a, 0x60, 0xdb, 0xd5, 0x21, 0xf4, 0x31, 0xc0, 0xd2, 0x4b, 0x29, 0x6b, 0x92,
	0x85, 0xff, 0xbb, 0xaa, 0xa0, 0x86, 0x70, 0x06, 0xb5, 0x13, 0xe4, 0x75, 0xa1, 0xa0, 0x43, 0xf8,
	0x47, 0x30, 0x35, 0xb7, 0x65, 0x94, 0xa7, 0x5a, 0x8d, 0x31, 0x71, 0x85, 0xcb, 0xc4, 0x0b, 0x29,
	0x91, 0x2d, 0xd7, 0x72, 0x75, 0x08, 0xff, 0x63, 0xc0, 0xd0, 0x89, 0x63, 0x12, 0xfa, 0xbc, 0x61,
	0x03, 0x92, 0xfe, 0x2f, 0x39, 0x60, 0x1d, 0xbc, 0x24, 0x9e, 0x4f, 0x92, 0x3c, 0x01, 0xf9, 0x9e,
	0x47, 0xbf, 0x4e, 0xc8, 0x6f, 0xc5, 0xe8, 0xf7, 0x08, 0xf7, 0x59, 0xed, 0xf4, 0xe8, 0x35, 0x08,
	0xbd, 0x86, 0xa6, 0x72, 0xd6, 0x6a, 0xe8, 0xad, 0x90, 0x4d, 0x9d, 0x9b, 0x89, 0xf9, 0xb4, 0xc8,
	0x73, 0xf9, 0x7c, 0x05, 0xd4, 0x6a, 0xca, 0x69, 0xd1, 0x31, 0x7c, 0x01, 0xa8, 0x90, 0x80, 0xc7,
	0xb3, 0xa9, 0xf5, 0x51, 0xa5, 0xd8, 0x47, 0xdf, 0x43, 0xff, 0x92, 0x50, 0xae, 0xf4, 0xc4, 0x0e,
	0xc7, 0x6f, 0xa1, 0x9b, 0x33, 0xfc, 0xf7, 0xf3, 0x1d, 0x18, 0x30, 0x6b, 0xd6, 0xf2, 0xbc, 0x19,
	0x9e, 0xe6, 0xc0, 0x1a, 0x7a, 0x7b, 0x0a, 0xee, 0xc1, 0x4b, 0xa8, 0x8b, 0x9d, 0xb0, 0xed, 0x67,
	0xb7, 0xa6, 0xcb, 0x7e, 0xa4, 0x92, 0x94, 0x96, 0x38, 0x35, 0x82, 0xe1, 0x3c, 0xf4, 0x3e, 0xdc,
	0x0a, 0x7e, 0xe5, 0x16, 0xfe, 0x0c, 0x06, 0x3a, 0x58, 0x3e, 0x9e, 0xe7, 0x80, 0x66, 0x41, 0x7a,
	0x48, 0xf1, 0x39, 0x98, 0x05, 0xb4, 0x9c, 0xe3, 0x3d, 0x9c, 0x6f, 0x88, 0x78, 0x32, 0x68, 0xa4,
	0xb1, 0xa0, 0x57, 0xd0, 0xd8, 0x46, 0x25, 0xb9, 0x51, 0x52, 0xfe, 0x16, 0x48, 0x87, 0x55, 0x78,
	0x6a, 0xc7, 0xde, 0x3b, 0x74, 0xc0, 0x5b, 0xee, 0xc7, 0x97, 0xd0, 0x93, 0x97, 0x74, 0xe6, 0x80,
	0x7a, 0x06, 0x8c, 0xc7, 0x9e, 0x01, 0xfc, 0x29, 0xbb, 0x48, 0x94, 0x45, 0x29, 0xf5, 0x9b, 0xaf,
	0xa1, 0x9d, 0x97, 0x05, 0x75, 0xd9, 0xe8, 0xae, 0x96, 0xcb, 0xd5, 0xcf, 0x73, 0xd7, 0x3c, 0x43,
	0x3d, 0x68, 0x4f, 0x9d, 0xab, 0xd9, 0x62, 0xe6, 0x6c, 0xe7, 0xa6, 0x81, 0x00, 0x1a, 0xcb, 0xb9,
	0x33, 0x63, 0xa2, 0xca, 0xe4, 0xcf, 0x3a, 0x34, 0xb9, 0x99, 0xbb, 0x9e, 0xa2, 0x2f, 0xa0, 0x29,
	0xae, 0x71, 0xb6, 0x1c, 0x4a, 0x4f, 0xb4, 0x07, 0xc4, 0x1e, 0xe8, 0x10, 0x73, 0x05, 0x9f, 0xa1,
	0x09, 0xb4, 0xe4, 0x05, 0xcb, 0x2c, 0x90, 0x14, 0xeb, 0x17, 0xbc, 0x6d, 0x16, 0x30, 0x69, 0xe3,
	0x40, 0x5f, 0xbf, 0xb4, 0x98, 0xe5, 0x33, 0xd5, 0x53, 0xc5, 0x1b, 0xd8, 0x7e, 0x7e, 0x04, 0x67,
	0x14, 0x97, 0x60, 0x16, 0x67, 0x95, 0x91, 0x7c, 0x24, 0xb5, 0x8f, 0x2e, 0x31, 0xdb, 0x3a, 0x21,
	0xc8, 0x88, 0xde, 0x82, 0x59, 0xa8, 0x06, 0x27, 0x1a, 0xa9, 0x1a, 0xe8, 0xb8, 0x3d, 0x2c, 0x82,
	0xd2, 0xfa, 0x5b, 0x80, 0x6c, 0x58, 0x99, 0xdd, 0xb9, 0x54, 0x29, 0x5e, 0x00, 0x36, 0x3a, 0x40,
	0xa5, 0xe5, 0x77, 0xd0, 0xc9, 0xa7, 0x6c, 0x9f, 0x80, 0x83, 0xd9, 0xb5, 0x47, 0x87, 0x70, 0x96,
	0xc0, 0x9e, 0x36, 0x3b, 0xfb, 0xd0, 0x8f, 0xa6, 0xcc, 0x7e, 0x76, 0x2c, 0x90, 0x14, 0x33, 0xe8,
	0xeb, 0xb3, 0xc3, 0x38, 0x54, 0x96, 0x8e, 0xe7, 0x2c, 0x2b, 0xc3, 0xe1, 0xac, 0x31, 0x96, 0x77,
	0x60, 0x16, 0x7b, 0x9f, 0xf1, 0xd8, 0xaa, 0xe2, 0x27, 0x66, 0x2d, 0xab, 0xc4, 0xf1, 0xbc, 0xe0,
	0xb3, 0x8b, 0x11, 0x88, 0xef, 0xc7, 0x8b, 0x36, 0xff, 0x5d, 0xf3, 0x0f, 0xca, 0xb5, 0xf1, 0xa1,
	0x21, 0xbe, 0x2c, 0xbf, 0xfa, 0x37, 0x00, 0x00, 0xff, 0xff, 0x72, 0x5e, 0xec, 0x97, 0x67, 0x0a,
	0x00, 0x00,
}
